name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  push:
    branches:
      - dev

env:
  AWS_REGION: ap-southeast-1
  ECS_CLUSTER: cs3219-project-ay2122-2122-s1-g34
  IMAGE_TAG: latest

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create .env.production
        env:
          ENV: ${{ secrets.ENV }}
        run: |
          echo "$ENV" > .env.production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push api-gateway to Amazon ECR
        id: build-api-gateway
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: peerprep/api-gateway
          ECS_SERVICE: cs3219-project-ay2122-2122-s1-g34-ApigatewayService-Ymx9PonEnpdo
        working-directory: ./api-gateway
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push client to Amazon ECR
        id: build-client
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: peerprep/client
          ECS_SERVICE: cs3219-project-ay2122-2122-s1-g34-ClientService-Mwcz4KX7jc74
        working-directory: ./client
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push code-runner-service to Amazon ECR
        id: build-code-runner-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: peerprep/code-runner-service
          ECS_SERVICE: cs3219-project-ay2122-2122-s1-g34-CoderunnerserviceService-IcamVFI9jHq0
        working-directory: ./code-runner-service
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push collaboration-service to Amazon ECR
        id: build-collaboration-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: peerprep/collaboration-service
          ECS_SERVICE: cs3219-project-ay2122-2122-s1-g34-CollaborationserviceService-kIrt4ET78vUs
        working-directory: ./collaboration-service
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push practice-service to Amazon ECR
        id: build-practice-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: peerprep/practice-service
          ECS_SERVICE: cs3219-project-ay2122-2122-s1-g34-PracticeserviceService-6vp5otWHwqjG
          IMAGE_TAG: latest
        working-directory: ./practice-services
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Install Docker Compose CLI
        run: |
          curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

      - name: Create an ecs context
        run: |
          docker context create ecs ecscontext --from-env

      - name: Deploy to ECS
        continue-on-error: true
        run: |
          docker --context ecscontext compose -f production.yml up
